trigger:
  branches:
    include:
      - main  # Run on every push to main

pool:
  vmImage: 'ubuntu-latest'

# ‚úÖ Enable Debug for Better Error Tracking
variables:
  System.Debug: true
  SIGN_FUNCTION_URL: "https://my-function-app26012004.azurewebsites.net/api/SignAndExport?code=rvAZsWPQvdCVgCnCGKop1ocVwh5okKv9oSNTHhgoth2yAzFul1duiA=="
  VERIFY_FUNCTION_URL: "https://my-function-app26012004.azurewebsites.net/api/VerifySignature?code=mO4i4ujkrXC5aFWF1H1kr95wqe7SxxcG1D7tbZTFwVm6AzFukp4BHQ=="

stages:
  # ‚úÖ Stage 1: Sign and Verify
  - stage: SignAndVerify
    displayName: "Sign and Verify Code"
    jobs:
      - job: SignAndVerifyJob
        displayName: "Sign and Verify Job"
        steps:
          # ‚úÖ Step 1: Checkout Code
          - checkout: self
            fetchDepth: 1
            persistCredentials: true
            displayName: "Checkout Code"

          # ‚úÖ Step 2: Debug Variables
          - script: |
              echo "üîç Checking Variable Values..."
              echo "SIGN_FUNCTION_URL: $(SIGN_FUNCTION_URL)"
              echo "VERIFY_FUNCTION_URL: $(VERIFY_FUNCTION_URL)"
              echo "‚úÖ Variables successfully loaded."
            displayName: "Debug Variables"

          # ‚úÖ Step 3: Zip the Code
          - script: |
              echo "üì¶ Zipping the code..."
              zip -r code_to_sign.zip ./
              echo "‚úÖ Code zipped successfully."
            displayName: "Zip the Code for Signing"

          # ‚úÖ Step 4: Invoke Azure Function for Signing (With 3 Files)
          - task: PowerShell@2
            displayName: "Invoke Sign API using PowerShell (Binary Handling)"
            inputs:
              targetType: 'inline'
              script: |
                $url = "$(SIGN_FUNCTION_URL)"
                
                # ‚úÖ Correct file paths
                $filePath = "$(System.DefaultWorkingDirectory)/code_to_sign.zip"
                $privateKeyPath = "$(System.DefaultWorkingDirectory)/private-key.asc"
                $passphrase = "my-secret-passphrase"  # Or use a secure variable
                
                # ‚úÖ Check if files exist
                if (-Not (Test-Path $filePath)) {
                  Write-Error "‚ùå File not found: $filePath"
                  exit 1
                }
                if (-Not (Test-Path $privateKeyPath)) {
                  Write-Error "‚ùå Private key not found: $privateKeyPath"
                  exit 1
                }
                
                # ‚úÖ Invoke API with files using -InFile (Binary Mode)
                Write-Output "‚úçÔ∏è Invoking Azure Function to Sign..."
                $outputZipPath = "$(System.DefaultWorkingDirectory)/signed_code.zip"
                
                $form = @{
                  file = Get-Item -Path $filePath
                  privateKeyFile = Get-Item -Path $privateKeyPath
                  passphrase = $passphrase
                }
                
                # üöÄ Invoke Sign API with Multipart Form Data
                Invoke-RestMethod -Uri $url -Method Post -Form $form -OutFile $outputZipPath
                
                # ‚úÖ Check if signed file is created
                if (-Not (Test-Path $outputZipPath)) {
                  Write-Error "‚ùå Signed file not received. Check Azure Function logs."
                  exit 1
                }
                
                Write-Output "‚úÖ Code signed and saved to signed_code.zip successfully."

          # ‚úÖ Step 5: Publish Signed Artifact
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/signed_code.zip"
              artifactName: "signed_code"
            displayName: "Publish Signed Artifact"

          # ‚úÖ Step 6: Invoke Azure Function for Verification (Binary File)
          - task: PowerShell@2
            displayName: "Invoke Verify API using PowerShell (Binary Handling)"
            inputs:
              targetType: 'inline'
              script: |
                $url = "$(VERIFY_FUNCTION_URL)"
                
                # ‚úÖ Correct file path
                $signedCodePath = "$(System.DefaultWorkingDirectory)/signed_code.zip"
                
                # ‚úÖ Check if file exists
                if (-Not (Test-Path $signedCodePath)) {
                  Write-Error "‚ùå Signed file not found: $signedCodePath"
                  exit 1
                }
                
                # ‚úÖ Invoke Verify API and receive output.zip
                Write-Output "üîé Invoking Azure Function to Verify..."
                $outputZipPath = "$(System.DefaultWorkingDirectory)/output.zip"
                
                # üöÄ Invoke API and save response as output.zip
                Invoke-RestMethod -Uri $url -Method Post -InFile $signedCodePath -ContentType "application/zip" -OutFile $outputZipPath
                
                # ‚úÖ Check if output.zip is created
                if (-Not (Test-Path $outputZipPath)) {
                  Write-Error "‚ùå Verification failed. No output.zip received."
                  exit 1
                }
                
                Write-Output "‚úÖ Verification successful. Saved as output.zip."

          # ‚úÖ Step 7: Publish Verified Output (output.zip)
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/output.zip"
              artifactName: "output_zip"
            displayName: "Publish Verified Output (output.zip)"

  # ‚úÖ Stage 2: Deploy
  - stage: Deploy
    displayName: "Deploy Signed Code"
    dependsOn: SignAndVerify
    condition: succeeded()
    jobs:
      - job: DeployJob
        displayName: "Deploy Signed Code"
        steps:
          # ‚úÖ Step 8: Download Verified Output Artifact
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: "output_zip"
              targetPath: "$(System.DefaultWorkingDirectory)/output"
            displayName: "Download Verified Output Artifact"

          # ‚úÖ Step 9: Deploy Verified Output to Azure App Service
          - script: |
              echo "üöÄ Deploying verified output to Azure App Service..."
              az webapp deployment source config-zip \
                --resource-group myResourceGroup \
                --name my-web-app \
                --src "$(System.DefaultWorkingDirectory)/output/output.zip"
              echo "‚úÖ Deployment completed successfully."
            displayName: "Deploy Verified Output"
