trigger:
  branches:
    include:
      - main  # Run on every push to main

pool:
  vmImage: 'ubuntu-latest'

# ‚úÖ Enable Debug for Better Error Tracking
variables:
  System.Debug: true
  SIGN_FUNCTION_URL: "https://my-function-app26012004.azurewebsites.net/api/SignAndExport?code=rvAZsWPQvdCVgCnCGKop1ocVwh5okKv9oSNTHhgoth2yAzFul1duiA=="
  VERIFY_FUNCTION_URL: "https://my-function-app26012004.azurewebsites.net/api/VerifySignature?code=mO4i4ujkrXC5aFWF1H1kr95wqe7SxxcG1D7tbZTFwVm6AzFukp4BHQ=="

stages:
  # ‚úÖ Stage 1: Sign and Verify
  - stage: SignAndVerify
    displayName: "Sign and Verify Code"
    jobs:
      - job: SignAndVerifyJob
        displayName: "Sign and Verify Job"
        steps:
          # ‚úÖ Step 1: Checkout Code
          - checkout: self
            fetchDepth: 1
            persistCredentials: true
            displayName: "Checkout Code"

          # ‚úÖ Step 2: Debug Variables
          - script: |
              echo "üîç Checking Variable Values..."
              echo "SIGN_FUNCTION_URL: $(SIGN_FUNCTION_URL)"
              echo "VERIFY_FUNCTION_URL: $(VERIFY_FUNCTION_URL)"
              echo "‚úÖ Variables successfully loaded."
            displayName: "Debug Variables"

          # ‚úÖ Step 3: Zip the Code
          - script: |
              echo "üì¶ Zipping the code..."
              zip -r code_to_sign.zip ./
              echo "‚úÖ Code zipped successfully."
            displayName: "Zip the Code for Signing"

          # ‚úÖ Step 4: Encode Zip File to Base64
          - script: |
              echo "üîê Encoding ZIP to base64..."
              base64 -w 0 code_to_sign.zip > code_to_sign.b64
              echo "‚úÖ Base64 encoding complete."
            displayName: "Encode ZIP File"

          # ‚úÖ Step 5: Invoke Azure Function for Signing (Using PowerShell for Better Debugging)
          - task: PowerShell@2
            displayName: "Invoke Sign API using PowerShell"
            inputs:
              targetType: 'inline'
              script: |
                $url = "$(SIGN_FUNCTION_URL)"
                $base64Data = Get-Content -Path "code_to_sign.b64" -Raw
                $jsonBody = @{
                  task = @{
                    file = $base64Data
                    metadata = "sign_request"
                  }
                } | ConvertTo-Json -Depth 3

                Write-Output "‚úçÔ∏è Invoking Azure Function to Sign..."
                try {
                  $response = Invoke-RestMethod -Uri $url -Method Post -Body $jsonBody -ContentType "application/json"
                  Write-Output "üîé Response: $response"
                  
                  # Check if response is empty or doesn't contain signed file
                  if (-not $response.signedFile) {
                    Write-Error "‚ùå Signing failed. No signed file received."
                    exit 1
                  }

                  # Save signed file to signed_code.zip
                  [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($response.signedFile)) | Set-Content signed_code.zip
                  Write-Output "‚úÖ Code signed successfully."

                } catch {
                  Write-Error "‚ùå Error invoking Sign API: $_"
                  exit 1
                }

          # ‚úÖ Step 6: Encode Signed File to Base64
          - script: |
              echo "üîê Encoding signed ZIP to base64..."
              base64 -w 0 signed_code.zip > signed_code.b64
              echo "‚úÖ Signed file encoded successfully."
            displayName: "Encode Signed ZIP File"

          # ‚úÖ Step 7: Invoke Azure Function for Verification
          - task: PowerShell@2
            displayName: "Invoke Verify API using PowerShell"
            inputs:
              targetType: 'inline'
              script: |
                $url = "$(VERIFY_FUNCTION_URL)"
                $base64Data = Get-Content -Path "signed_code.b64" -Raw
                $jsonBody = @{
                  task = @{
                    file = $base64Data
                    metadata = "verify_request"
                  }
                } | ConvertTo-Json -Depth 3

                Write-Output "üîé Invoking Azure Function to Verify..."
                try {
                  $response = Invoke-RestMethod -Uri $url -Method Post -Body $jsonBody -ContentType "application/json"
                  Write-Output "üîé Response: $response"
                  
                  # Check verification status
                  if ($response.verificationStatus -ne "true") {
                    Write-Error "‚ùå Signature verification failed."
                    exit 1
                  }

                  Write-Output "‚úÖ Signature verified successfully."

                } catch {
                  Write-Error "‚ùå Error invoking Verify API: $_"
                  exit 1
                }

          # ‚úÖ Step 8: Publish Signed Artifact
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/signed_code.zip"
              artifactName: "signed_code"
            displayName: "Publish Signed Artifact"

  # ‚úÖ Stage 2: Deploy
  - stage: Deploy
    displayName: "Deploy Signed Code"
    dependsOn: SignAndVerify
    condition: succeeded()
    jobs:
      - job: DeployJob
        displayName: "Deploy Signed Code"
        steps:
          # ‚úÖ Step 9: Download Signed Artifact
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: "signed_code"
              targetPath: "$(System.DefaultWorkingDirectory)/signed_code"
            displayName: "Download Signed Artifact"

          # ‚úÖ Step 10: Deploy Signed Artifact to Azure App Service
          - script: |
              echo "üöÄ Deploying signed code to Azure App Service..."
              az webapp deployment source config-zip \
                --resource-group myResourceGroup \
                --name my-web-app \
                --src "$(System.DefaultWorkingDirectory)/signed_code/signed_code.zip"
              echo "‚úÖ Deployment completed successfully."
            displayName: "Deploy to Azure App Service"
