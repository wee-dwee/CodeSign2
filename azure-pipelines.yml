trigger:
  branches:
    include:
      - main  # Run on every push to main

pool:
  vmImage: 'ubuntu-latest'

# ‚úÖ Enable Debug for Variable Tracking
variables:
  System.Debug: true
  SIGN_FUNCTION_URL: "https://my-function-app26012004.azurewebsites.net/api/SignAndExport?code=rvAZsWPQvdCVgCnCGKop1ocVwh5okKv9oSNTHhgoth2yAzFul1duiA=="
  VERIFY_FUNCTION_URL: "https://my-function-app26012004.azurewebsites.net/api/VerifySignature?code=mO4i4ujkrXC5aFWF1H1kr95wqe7SxxcG1D7tbZTFwVm6AzFukp4BHQ=="

stages:
  # ‚úÖ Stage 1: Sign and Verify
  - stage: SignAndVerify
    displayName: "Sign and Verify Code"
    jobs:
      - job: SignAndVerifyJob
        displayName: "Sign and Verify Job"
        steps:
          # ‚úÖ Step 1: Debug Variables
          - script: |
              echo "üîç Checking Variable Values..."
              echo "SIGN_FUNCTION_URL: $(SIGN_FUNCTION_URL)"
              echo "VERIFY_FUNCTION_URL: $(VERIFY_FUNCTION_URL)"
              echo "‚úÖ Variables successfully loaded."
            displayName: "Debug Variables"

          # ‚úÖ Step 2: Checkout Code
          - task: Checkout@2
            displayName: "Checkout Code"

          # ‚úÖ Step 3: Zip the Code
          - script: |
              echo "üì¶ Zipping the code..."
              zip -r code_to_sign.zip ./
              echo "‚úÖ Code zipped successfully."
            displayName: "Zip the Code for Signing"

          # ‚úÖ Step 4: Encode Zip File to Base64
          - script: |
              echo "üîê Encoding ZIP to base64..."
              base64 -w 0 code_to_sign.zip > code_to_sign.b64
              echo "‚úÖ Base64 encoding complete."
            displayName: "Encode ZIP File"

          # ‚úÖ Step 5: Invoke Azure Function for Signing
          - script: |
              echo "‚úçÔ∏è Invoking Azure Function to Sign..."
              SIGN_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" \
                -d @- "$(SIGN_FUNCTION_URL)" <<EOF
              {
                "task": {
                  "file": "$(cat code_to_sign.b64)",
                  "metadata": "sign_request"
                }
              }
              EOF
              )
              
              # Debug: Print raw response
              echo "üîé Raw Response from Azure Function: $SIGN_RESPONSE"
              
              # Check for empty or invalid response
              if [ -z "$SIGN_RESPONSE" ]; then
                echo "‚ùå Empty response from Azure Function. Exiting."
                exit 1
              fi
              
              # Check if the response contains 'signedFile'
              SIGN_STATUS=$(echo $SIGN_RESPONSE | jq -r '.status')
              if [ "$SIGN_STATUS" != "success" ]; then
                echo "‚ùå Signing failed. Status: $SIGN_STATUS"
                exit 1
              fi
              
              # Save signed file to signed_code.zip
              echo $SIGN_RESPONSE | jq -r '.signedFile' | base64 -d > signed_code.zip
              echo "‚úÖ Code signed successfully."
            displayName: "Sign Code using Azure Function"

          # ‚úÖ Step 6: Encode Signed File to Base64
          - script: |
              echo "üîê Encoding signed ZIP to base64..."
              base64 -w 0 signed_code.zip > signed_code.b64
              echo "‚úÖ Signed file encoded successfully."
            displayName: "Encode Signed ZIP File"

          # ‚úÖ Step 7: Invoke Azure Function for Verification
          - script: |
              echo "üîé Invoking Azure Function to Verify..."
              VERIFY_RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" \
                -d @- "$(VERIFY_FUNCTION_URL)" <<EOF
              {
                "task": {
                  "file": "$(cat signed_code.b64)",
                  "metadata": "verify_request"
                }
              }
              EOF
              )
              
              # Debug: Print raw response
              echo "üîé Raw Response from Azure Function: $VERIFY_RESPONSE"
              
              # Check for empty or invalid response
              if [ -z "$VERIFY_RESPONSE" ]; then
                echo "‚ùå Empty response from Azure Function. Exiting."
                exit 1
              fi
              
              # Check verification result
              VERIFIED=$(echo $VERIFY_RESPONSE | jq -r '.verificationStatus')
              if [ "$VERIFIED" != "true" ]; then
                echo "‚ùå Signature verification failed. Stopping pipeline."
                exit 1
              fi
              echo "‚úÖ Signature verified successfully."
            displayName: "Verify Signature using Azure Function"

          # ‚úÖ Step 8: Publish Signed Artifact
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(System.DefaultWorkingDirectory)/signed_code.zip"
              artifactName: "signed_code"
            displayName: "Publish Signed Artifact"

  # ‚úÖ Stage 2: Deploy
  - stage: Deploy
    displayName: "Deploy Signed Code"
    dependsOn: SignAndVerify
    condition: succeeded()
    jobs:
      - job: DeployJob
        displayName: "Deploy Signed Code"
        steps:
          # ‚úÖ Step 9: Download Signed Artifact
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: "signed_code"
              targetPath: "$(System.DefaultWorkingDirectory)/signed_code"
            displayName: "Download Signed Artifact"

          # ‚úÖ Step 10: Deploy Signed Artifact to Azure App Service
          - script: |
              echo "üöÄ Deploying signed code to Azure App Service..."
              az webapp deployment source config-zip \
                --resource-group myResourceGroup \
                --name my-web-app \
                --src "$(System.DefaultWorkingDirectory)/signed_code/signed_code.zip"
              echo "‚úÖ Deployment completed successfully."
            displayName: "Deploy to Azure App Service"
